import esptool
import sys
import os
import argparse
import json

def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

def main():
    # add optional --port argument using argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--port', help='Serial port', default=None, type=str)
    # add optional --no-fs flag using argparse which will disable the additional filesystem flashing using -flash_args
    parser.add_argument('--no-fs', help='No filesystems, do not flash filesystem image(s)',
                        action='store_true', default=False)

    # parse the arguments
    args = parser.parse_args()

    # load flasher_args.json. flasher_args.json is a json file that contains the
    # arguments to be passed to esptool this file is generated by the build
    # script
    flasher_args_file = open(resource_path('flasher_args.json'), 'r')
    flasher_args = json.loads(flasher_args_file.read())
    print(f'Loaded flasher args: {flasher_args}')

    # build the command arguments from flasher_args
    # get the extra_esptool_args
    esptool_args = flasher_args['extra_esptool_args']

    command = ['--baud', '460800',
               '--before', esptool_args['before'],
               '--after', esptool_args['after'],
               '--chip', esptool_args['chip'],
               'write_flash']

    write_flash_args = flasher_args['write_flash_args']
    # oddly, write_flash_args is a list (whereas everything else is a dict), so
    # we'll just append the items
    for arg in write_flash_args:
        command.append(arg)

    for offset, filepath in flasher_args['flash_files'].items():
        command.append(offset)
        # convert the filename to use resource path
        command.append(resource_path(filepath))

    # if the --no-fs flag is set, then we should NOT look for -flash_args files
    if args.no_fs:
        print('Skipping filesystem flashing (--no-fs flag set) - no -flash_args files will be used')
    else:
        print('Looking for -flash_args files in build directory... ')
        # for each of the files in resource_path('build'), if they have
        # '-flash_args' in the name, then we should:
        #
        # 1. open that file
        # 2. split the file by newline
        # 3. for each line, if it contains '0x', then
        #   1. split the line by space into <offset> and <binary>
        #   2. convert <binary> using resource_path(<binary>)
        #   3. append the offset and binary to the command.
        for filename in os.listdir(resource_path('build')):
            print(f'Checking {filename}...')
            # if the filename contains '-flash_args', then we should process it
            if '-flash_args' in filename:
                print(f'Found {filename}...')
                flash_args_file = open(resource_path('build/' + filename), 'r').read()
                # split the file by newline
                for line in flash_args_file.splitlines():
                    print(f'Processing line: {line}')
                    # if the line contains '0x', then split the line by space into
                    if '0x' in line:
                        offset, binary = line.split(' ')
                        print(f'Found offset: {offset} and binary: {binary}')
                        command.append(offset)
                        command.append(resource_path(binary))
                        print(f'Added {offset} and {resource_path(binary)} to command')

    # if the port argument is provided, add it to the command
    if args.port:
        port = args.port
        print(f'Using port: {port}')
        command.insert(0, '--port')
        command.insert(1, port)
    else:
        print(f'Automatically detecting {esptool_args["chip"]} on serial port')

    print('Using command arguments: %s' % ' '.join(command))
    esptool.main(command)

if __name__ == '__main__':
    main()
