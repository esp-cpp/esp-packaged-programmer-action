import esptool
import sys
import os
import argparse
import json

def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

def main():
    # add optional --port argument using argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--port', help='Serial port', default=None, type=str)

    # parse the arguments
    args = parser.parse_args()

    # load flasher_args.json. flasher_args.json is a json file that contains the
    # arguments to be passed to esptool this file is generated by the build
    # script
    flasher_args_file = open(resource_path('flasher_args.json'), 'r')
    flasher_args = json.loads(flasher_args_file.read())
    print(f'Loaded flasher args: {flasher_args}')

    # build the command arguments from flasher_args
    # get the extra_esptool_args
    esptool_args = flasher_args['extra_esptool_args']

    command = ['--baud', '460800',
               '--before', esptool_args['before'],
               '--after', esptool_args['after'],
               '--chip', esptool_args['chip'],
               'write_flash']

    write_flash_args = flasher_args['write_flash_args']
    # oddly, write_flash_args is a list (whereas everything else is a dict), so
    # we'll just append the items
    for arg in write_flash_args:
        command.append(arg)

    for offset, filepath in flasher_args['flash_files'].items():
        command.append(offset)
        # convert the filename to use resource path with bin/<filename> and add
        # it to the command
        filename = filepath.split('/')[-1] # get the filename
        location = resource_path('bin/' + filename)
        command.append(location)

    # if the port argument is provided, add it to the command
    if args.port:
        port = args.port
        print(f'Using port: {port}')
        command.insert(0, '--port')
        command.insert(1, port)
    else:
        print(f'Automatically detecting {esptool_args["chip"]} on serial port')

    print('Using command arguments: %s' % ' '.join(command))
    esptool.main(command)

if __name__ == '__main__':
    main()
