name: 'ESP Packaged Programmer'
description: 'Package esptool and the binaries into an executable'
inputs:
  zipfile-id:
    description: 'Artifact ID for the Zipfile to download. Zipfile should contain firmware.bin, bootloader.bin, partition-table.bin, and flasher_args.json. May optionally contain filesystem binaries and associated -flash_args files.'
    required: true
  programmer-name:
    description: 'Base name of the programmer executable. Will have version tag (e.g. v1.0.0 or commit hash if no tags) and OS suffix (e.g. windows, linux, macos) appended.'
    required: false
    default: 'programmer'
outputs:
  artifact-name:
    description: "Name of the programmer artifact that was packaged and uploaded"
    value: ${{ steps.output.outputs.artifact-name }}
runs:
  using: "composite"
  steps:
    - name: Check Runner OS
      if: ${{ runner.os != 'Linux' && runner.os != 'Windows' && runner.os != 'macOS'}}
      shell: bash
      run: |
        echo "::error title=â›” error hint::Support Linux, Windows, and macOS Only"
        exit 1

    - name: Clone the parent repo (to get the version)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get the version
      shell: bash
      run: |
        echo "Trying to get the version from the parent repo"
        # Get the version of the parent repo
        version=$(git describe --tags --dirty || git rev-parse --short HEAD)
        echo "Got version: ${version}"
        # Set the version as an output variable
        echo "version_str=$version" >> $GITHUB_ENV

    - name: Setup XCode
      if: ${{ runner.os == 'macOS' }}
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Set up Python
      uses: actions/setup-python@v5
      id: id_python_310
      with:
        python-version: '3.10'

    - name: Download the zipfile artifact
      uses: actions/download-artifact@v4
      id: download_zipfile
      with:
        artifact-ids: ${{ inputs.zipfile-id }}
        path: ${{ github.action_path }}/build

    - name: Move the artifacts to the build directory
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        # we don't control the name of the unpacked archive (folder) that's
        # within build/ so simply move everything within that subfolder into
        # build/
        find build -maxdepth 2 -mindepth 2 -exec mv {} build/. \;
        # also, we don't want any elf files if they were uploaded (which they
        # sometimes are for debug purposes), so delete them
        find build -name "*.elf" -type f -delete

    # Build if windows
    - name: PyInstaller
      if: ${{ runner.os == 'Windows'}}
      working-directory: ${{ github.action_path }}
      shell: pwsh
      run: |
        # setup the python environment
        ${{ steps.id_python_310.outputs.python-path }} -m pip install -r requirements.txt
        # we need to clone v4.7.0 of esptool into the repo to ensure all of its data is properly packaged
        git clone --depth 1 --branch v4.7.0 https://github.com/espressif/esptool
        # now build the installer
        ${{ steps.id_python_310.outputs.python-path }} -m PyInstaller --clean programmer.spec
        # now actually make the artifact
        $artifact_name="${{ inputs.programmer-name }}_${{ env.version_str }}_windows.exe"
        mv dist/programmer.exe ${artifact_name}
        "artifactName=${artifact_name}" | Out-File -FilePath $env:GITHUB_ENV -Append

    # Build if Linux or macOS
    - name: PyInstaller
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      working-directory: ${{ github.action_path }}
      shell: bash
      run: |
        # save the runner OS to a variable in lower case
        os_name=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')
        # setup the python environment
        ${{ steps.id_python_310.outputs.python-path }} -m pip install -r requirements.txt
        # we need to clone v4.7.0 of esptool into the repo to ensure all of its data is properly packaged
        git clone --depth 1 --branch v4.7.0 https://github.com/espressif/esptool
        # now build the installer
        ${{ steps.id_python_310.outputs.python-path }} -m PyInstaller --clean programmer.spec
        # now actually make the artifact
        artifact_name="${{ inputs.programmer-name }}_${{ env.version_str }}_${os_name}.bin"
        mv dist/programmer $artifact_name
        echo "artifactName=$artifact_name" >> "$GITHUB_ENV"

    # Set the ouput
    - name: Set the action output
      id: output
      shell: bash
      run: echo "artifact-name=${{ env.artifactName }}" >> $GITHUB_OUTPUT

    # now actually upload the artifacts
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifactName }}
        path: ${{ github.action_path }}/${{ env.artifactName }}

    # attach the files to the release (if there is one)
    - name: Attach files to release
      uses: softprops/action-gh-release@v2
      if: ${{ github.event.release && github.event.action == 'published' }}
      with:
        files: ${{ github.action_path }}/${{ env.artifactName }}
